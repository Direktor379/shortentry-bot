# üîê ENV —ñ –∑–∞–ø—É—Å–∫ FastAPI
from fastapi import FastAPI, Request
import os
from dotenv import load_dotenv
import requests
from datetime import datetime
from openai import OpenAI
from binance.client import Client
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import asyncio
import json
import websockets
import threading
import time
from collections import defaultdict

# üåç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
app = FastAPI()

@app.get("/")
async def healthcheck():
    return {"status": "running"}

# üîê –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
NEWS_API_KEY = os.getenv("NEWS_API_KEY")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
TRADE_USD_AMOUNT = float(os.getenv("TRADE_USD_AMOUNT", 1000))
DRY_RUN = os.getenv("DRY_RUN", "false").lower() == "true"  # üß™ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç—É

# üîå –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
binance_client = Client(api_key=BINANCE_API_KEY, api_secret=BINANCE_SECRET_KEY)
client = OpenAI(api_key=OPENAI_API_KEY)
last_open_interest = None

# üì¨ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É Telegram
def send_message(text: str):
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        data = {"chat_id": CHAT_ID, "text": text}
        requests.post(url, data=data)
    except Exception as e:
        print(f"Telegram error: {e}")  # <-- —Ç—É—Ç –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —Ñ—É–Ω–∫—Ü—ñ—è

# üìä –ó–∞–ø–∏—Å —É Google Sheets
def log_to_sheet(type_, entry, tp, sl, qty, result=None, comment=""):
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name("/etc/secrets/credentials.json", scope)
        gclient = gspread.authorize(creds)
        sheet = gclient.open_by_key(GOOGLE_SHEET_ID).worksheets()[0]
        now = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        row = [now, type_, entry, tp, sl, qty, result or "", comment]
        sheet.append_row(row, value_input_option='RAW')
    except Exception as e:
        send_message(f"‚ùå Sheets error: {e}")

def update_result_in_sheet(type_, result, pnl=None):
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name("/etc/secrets/credentials.json", scope)
        gclient = gspread.authorize(creds)
        sheet = gclient.open_by_key(GOOGLE_SHEET_ID).worksheets()[0]
        data = sheet.get_all_values()
        for i in reversed(range(len(data))):
            if len(data[i]) >= 7 and data[i][1] == type_ and data[i][6] == "":
                sheet.update_cell(i + 1, 7, result)
                if pnl is not None:
                    sheet.update_cell(i + 1, 8, f"{pnl} USDT")
                break
    except Exception as e:
        send_message(f"‚ùå Update result error: {e}")

def update_stats_sheet():
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name("/etc/secrets/credentials.json", scope)
        gclient = gspread.authorize(creds)
        sh = gclient.open_by_key(GOOGLE_SHEET_ID)
        data = sh.worksheets()[0].get_all_values()
        rows = data[1:]

        stats = {}
        for row in rows:
            if len(row) < 7:
                continue
            gpt_type = row[1]
            result = row[6].strip().upper()
            if gpt_type not in stats:
                stats[gpt_type] = {"WIN": 0, "LOSS": 0}
            if result == "WIN":
                stats[gpt_type]["WIN"] += 1
            elif result == "LOSS":
                stats[gpt_type]["LOSS"] += 1

        stat_rows = [["Type", "WIN", "LOSS", "Total", "Winrate %"]]
        for k, v in stats.items():
            total = v["WIN"] + v["LOSS"]
            winrate = round(v["WIN"] / total * 100, 2) if total > 0 else 0
            stat_rows.append([k, v["WIN"], v["LOSS"], total, winrate])

        try:
            stat_sheet = sh.worksheet("Stats")
            stat_sheet.clear()
        except:
            stat_sheet = sh.add_worksheet(title="Stats", rows="20", cols="5")

        stat_sheet.update("A1", stat_rows)
    except Exception as e:
        send_message(f"‚ùå Stats error: {e}")
def get_latest_news():
    try:
        url = f"https://cryptopanic.com/api/v1/posts/?auth_token={NEWS_API_KEY}&filter=important"
        r = requests.get(url)
        news = r.json()
        return "\n".join([item["title"] for item in news.get("results", [])[:3]])
    except Exception as e:
        send_message(f"‚ùå News error: {e}")
        return "‚ö†Ô∏è –ù–æ–≤–∏–Ω–∏ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏."

def get_open_interest(symbol="BTCUSDT"):
    try:
        r = requests.get("https://fapi.binance.com/fapi/v1/openInterest", params={"symbol": symbol})
        return float(r.json()["openInterest"]) if r.ok else None
    except Exception as e:
        send_message(f"‚ùå OI error: {e}")
        return None

def get_volume(symbol="BTCUSDT"):
    try:
        data = binance_client.futures_klines(symbol=symbol, interval="1m", limit=1)
        return float(data[-1][7])
    except Exception as e:
        send_message(f"‚ùå Volume error: {e}")
        return None

def calculate_vwap(symbol="BTCUSDT", interval="1m", limit=10):
    try:
        candles = binance_client.futures_klines(symbol=symbol, interval=interval, limit=limit)
        total_volume = 0
        total_price_volume = 0
        for candle in candles:
            high = float(candle[2])
            low = float(candle[3])
            close = float(candle[4])
            volume = float(candle[5])
            typical_price = (high + low + close) / 3
            total_volume += volume
            total_price_volume += typical_price * volume
        return total_price_volume / total_volume if total_volume > 0 else None
    except Exception as e:
        send_message(f"‚ùå VWAP error: {e}")
        return None

def is_flat_zone(symbol="BTCUSDT"):
    try:
        price = float(binance_client.futures_mark_price(symbol=symbol)["markPrice"])
        vwap = calculate_vwap(symbol)
        if not vwap:
            return False
        return abs(price - vwap) / price < 0.005
    except Exception as e:
        send_message(f"‚ùå Flat zone error: {e}")
        return False
def get_gspread_client():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("/etc/secrets/credentials.json", scope)
    return gspread.authorize(creds)

def get_last_trades(limit=10):
    try:
        gclient = get_gspread_client()
        sheet = gclient.open_by_key(GOOGLE_SHEET_ID).worksheets()[0]
        data = sheet.get_all_values()[1:]
        data.reverse()
        gpt_logs = [row for row in data if len(row) >= 7 and row[1] in ["LONG", "SHORT", "BOOSTED_LONG", "BOOSTED_SHORT"] and row[6]]
        recent = gpt_logs[:limit]
        return "\n".join(f"{i+1}. {row[1]} ‚Üí {row[6]}" for i, row in enumerate(recent))
    except Exception as e:
        send_message(f"‚ùå Last trades error: {e}")
        return ""

def get_stats_summary():
    try:
        gclient = get_gspread_client()
        sheet = gclient.open_by_key(GOOGLE_SHEET_ID).worksheet("Stats")
        data = sheet.get_all_values()[1:]
        lines = [f"{row[0]}: {row[4]}%" for row in data if len(row) >= 5]
        return "\n".join(lines)
    except Exception as e:
        send_message(f"‚ùå Stats summary error: {e}")
        return "–ù–µ–º–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"

def get_recent_mistakes(limit=5):
    try:
        gclient = get_gspread_client()
        sheet = gclient.open_by_key(GOOGLE_SHEET_ID).worksheet("Learning Log")
        data = sheet.get_all_values()[1:]
        mistakes = [row for row in reversed(data) if len(row) >= 5 and row[2].strip().upper() == "LOSS" and row[4].strip()]
        return "\n".join(f"- {row[4]}" for row in mistakes[:limit])
    except Exception as e:
        send_message(f"‚ùå Mistakes error: {e}")
        return ""

def get_recent_trades_and_streak(limit=10):
    try:
        gclient = get_gspread_client()
        sheet = gclient.open_by_key(GOOGLE_SHEET_ID).worksheets()[0]
        data = sheet.get_all_values()[1:]
        data.reverse()
        trades = [row for row in data if len(row) >= 7 and row[1] in ["LONG", "SHORT", "BOOSTED_LONG", "BOOSTED_SHORT"] and row[6]]
        recent = trades[:limit]
        formatted = [f"{i+1}. {row[1]} ‚Üí {row[6]}" for i, row in enumerate(recent)]
        streak = 0
        for row in trades:
            if row[6].strip().upper() == "WIN":
                streak += 1
            else:
                break
        return "\n".join(formatted), streak
    except Exception as e:
        send_message(f"‚ùå Streak error: {e}")
        return "", 0
def ask_gpt_trade_with_all_context(type_, news, oi, delta, volume):
    try:
        recent_trades, win_streak = get_recent_trades_and_streak()
        stats_summary = get_stats_summary()
        mistakes = get_recent_mistakes()

        type_upper = type_.upper()

        # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ —Ñ–ª–µ—Ç—É + –Ω–∏–∑—å–∫–æ–≥–æ –æ–± º—î–º—É (–∫—Ä—ñ–º BOOSTED)
        if is_flat_zone("BTCUSDT") and "BOOSTED" not in type_upper and (volume is None or volume < 300):
            return "SKIP"

        oi_text = f"{oi:,.0f}" if oi is not None else "–Ω–µ–≤—ñ–¥–æ–º–æ"
        delta_text = f"{delta:.2f}%" if delta is not None else "–Ω–µ–≤—ñ–¥–æ–º–æ"

        prompt = f"""
GPT –º–∏–Ω—É–ª—ñ —Å–∏–≥–Ω–∞–ª–∏:
{recent_trades}

Winrate –ø–æ —Ç–∏–ø–∞—Ö:
{stats_summary}

–°–µ—Ä—ñ—è –ø–µ—Ä–µ–º–æ–≥: {win_streak}/5

–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–º–∏–ª–∫–∏:
{mistakes}

–°–∏–≥–Ω–∞–ª: {type_upper}
–û–± º—î–º –∑–∞ 1 —Ö–≤: {volume}
Open Interest: {oi_text}
–ó–º—ñ–Ω–∞ OI: {delta_text}
–ù–æ–≤–∏–Ω–∏:
{news}

–¶—ñ–ª—å: –¥–æ—Å—è–≥—Ç–∏ 5 –ø–µ—Ä–µ–º–æ–≥ –ø–æ—Å–ø—ñ–ª—å. –ü—Ä–∏–π–º–∏ –∑–≤–∞–∂–µ–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è.
‚ùóÔ∏è –û–±–µ—Ä–∏ –æ–¥–Ω–µ –∑:
- LONG / BOOSTED_LONG / SHORT / BOOSTED_SHORT / SKIP
"""

        res = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢–∏ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π —Å–∫–∞–ª—å–ø-—Ç—Ä–µ–π–¥–µ—Ä. "
                        "–í–∏–±–µ—Ä–∏ –ª–∏—à–µ –æ–¥–Ω–µ —Å–ª–æ–≤–æ –∑ —Ü—å–æ–≥–æ —Å–ø–∏—Å–∫—É: LONG, BOOSTED_LONG, SHORT, BOOSTED_SHORT –∞–±–æ SKIP. "
                        "–ù–µ –¥–æ–¥–∞–≤–∞–π –ø–æ—è—Å–Ω–µ–Ω—å. –ù–µ –ø–æ—è—Å–Ω—é–π —Å–≤—ñ–π –≤–∏–±—ñ—Ä. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Å—Ç—Ä–æ–≥–æ –ª–∏—à–µ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º."
                    )
                },
                {"role": "user", "content": prompt}
            ]
        )

        gpt_answer = res.choices[0].message.content.strip()
        send_message(f"üì§ GPT: {gpt_answer}")
        return gpt_answer

    except Exception as e:
        send_message(f"‚ùå GPT error: {e}")
        return "SKIP"
# üìí Learning Log ‚Äî –ø–æ—è—Å–Ω–µ–Ω–Ω—è –≤—Ç—Ä–∞—Ç —ñ –ª–æ–≥—É–≤–∞–Ω–Ω—è GPT

def get_gspread_client():
    try:
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/drive"
        ]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            "/etc/secrets/credentials.json", scope
        )
        return gspread.authorize(creds)
    except Exception as e:
        send_message(f"‚ùå GSpread auth error: {e}")
        return None

def explain_trade_outcome(trade_type, result, pnl):
    try:
        prompt = f"""
–¢–∏–ø —É–≥–æ–¥–∏: {trade_type}
–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}
PnL: {pnl}

–ü–æ—è—Å–Ω–∏ –∫–æ—Ä–æ—Ç–∫–æ (1 —Ä–µ—á–µ–Ω–Ω—è–º), —á–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–≤ —Ç–∞–∫–∏–º. –Ø–∫—â–æ –±—É–ª–∞ –ø–æ–º–∏–ª–∫–∞ ‚Äî –≤–∫–∞–∂–∏ —ó—ó.
"""
        res = client.chat.completions.create(   
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": "–¢–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥-–∞–Ω–∞–ª—ñ—Ç–∏–∫. –ü–æ—è—Å–Ω–∏, —á–æ–º—É —É–≥–æ–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑ —Ç–∞–∫–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º. –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ –∫–æ—Ä–æ—Ç–∫–æ—é, –ø–æ —Å—É—Ç—ñ."},
                {"role": "user", "content": prompt}
            ]
        )
        return res.choices[0].message.content.strip()
    except Exception as e:
        send_message(f"‚ùå GPT (explain_trade) error: {e}")
        return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –≤—ñ–¥ GPT."

def log_learning_entry(trade_type, result, reason, pnl=None):
    try:
        gclient = get_gspread_client()
        if not gclient:
            return

        sh = gclient.open_by_key(GOOGLE_SHEET_ID)

        try:
            sheet = sh.worksheet("Learning Log")
        except:
            sheet = sh.add_worksheet(title="Learning Log", rows="1000", cols="10")
            sheet.append_row(["Time", "Type", "Result", "PnL", "GPT Analysis"])

        now = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        row = [now, trade_type, result, pnl or "", reason]
        sheet.append_row(row)
    except Exception as e:
        send_message(f"‚ùå Learning Log error: {e}")
# üì° –ö–ª–∞—Å—Ç–µ—Ä–Ω–∞ –ª–æ–≥—ñ–∫–∞: bucket'–∏ –ø–æ $10 —ñ —ñ–º–ø—É–ª—å—Å –Ω–∞ 5 —Å–µ–∫—É–Ω–¥–∞—Ö

CLUSTER_BUCKET_SIZE = 10
CLUSTER_INTERVAL = 60  # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–∞–∑ –Ω–∞ 60 —Å–µ–∫
cluster_data = defaultdict(lambda: {"buy": 0.0, "sell": 0.0})
cluster_last_reset = time.time()
cluster_is_processing = False  # –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –¥—É–±–ª—ñ–≤

async def monitor_cluster_trades():
    global cluster_last_reset, cluster_is_processing
    uri = "wss://fstream.binance.com/ws/btcusdt@aggTrade"
    async with websockets.connect(uri) as websocket:
        while True:
            try:
                msg = json.loads(await websocket.recv())
                price = float(msg['p'])
                qty = float(msg['q'])
                is_sell = msg['m']
                bucket = round(price / CLUSTER_BUCKET_SIZE) * CLUSTER_BUCKET_SIZE

                if is_sell:
                    cluster_data[bucket]['sell'] += qty
                else:
                    cluster_data[bucket]['buy'] += qty

                now = time.time()
                if now - cluster_last_reset >= CLUSTER_INTERVAL and not cluster_is_processing:
                    cluster_is_processing = True  # –±–ª–æ–∫—É—î–º–æ –ø–æ–≤—Ç–æ—Ä–∏

                    # –§—ñ–∫—Å—É—î–º–æ —ñ–º–ø—É–ª—å—Å
                    strongest_bucket = max(cluster_data.items(), key=lambda x: x[1]["buy"] + x[1]["sell"])
                    total_buy = strongest_bucket[1]["buy"]
                    total_sell = strongest_bucket[1]["sell"]
                    total = total_buy + total_sell

                    signal = None
                    if total_buy >= 1000:
                    signal = "BOOSTED_LONG"
                    elif total_sell >= 1000:
                    signal = "BOOSTED_SHORT"

# üìä –õ–æ–≥—É—î–º–æ –ø–æ—Ç—É–∂–Ω—ñ –∫–ª–∞—Å—Ç–µ—Ä–∏, —è–∫—ñ –Ω–µ —Å—Ç–∞–ª–∏ BOOSTED
                    if signal is None and (total_buy > 300 or total_sell > 300):
                    send_message(f"üìä –ö–ª–∞—Å—Ç–µ—Ä {strongest_bucket[0]} ‚Üí Buy: {round(total_buy)}, Sell: {round(total_sell)} | –ù–µ BOOSTED (–ø–æ—Ä—ñ–≥: 1000)")

                        signal = "BOOSTED_SHORT"

                    if signal:
                        news = get_latest_news()
                        oi = get_open_interest("BTCUSDT")
                        volume = get_volume("BTCUSDT")
                        decision = await ask_gpt_trade_with_all_context(signal, news, oi, 0, volume)

                        send_message(f"üí• {signal} ‚Äî –∫–ª–∞—Å—Ç–µ—Ä {strongest_bucket[0]} | Buy: {round(total_buy)}, Sell: {round(total_sell)}")
                        send_message(f"ü§ñ GPT –∫–ª–∞—Å—Ç–µ—Ä: {decision}")

                        if decision in ["LONG", "BOOSTED_LONG"]:
                            await asyncio.to_thread(place_long, "BTCUSDT", TRADE_USD_AMOUNT)
                        elif decision in ["SHORT", "BOOSTED_SHORT"]:
                            await asyncio.to_thread(place_short, "BTCUSDT", TRADE_USD_AMOUNT)

                    cluster_data.clear()
                    cluster_last_reset = now
                    cluster_is_processing = False  # —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è

            except Exception as e:
                send_message(f"‚ö†Ô∏è Cluster WS error: {e}")
                await asyncio.sleep(5)
# üìà –¢–æ—Ä–≥—ñ–≤–ª—è: –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è LONG/SHORT –∑ DRY_RUN —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏

def has_open_position(side):
    try:
        positions = binance_client.futures_position_information(symbol="BTCUSDT")
        for p in positions:
            amt = float(p["positionAmt"])
            if side == "LONG" and amt > 0:
                return True
            if side == "SHORT" and amt < 0:
                return True
        return False
    except Exception as e:
        send_message(f"‚ùå Position check error: {e}")
        return False

def get_quantity(symbol, usd_amount):
    try:
        mark_price = float(binance_client.futures_mark_price(symbol=symbol)["markPrice"])
        return round(usd_amount / mark_price, 3)  # –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–æ 0.001 BTC
    except Exception as e:
        send_message(f"‚ùå Quantity calc error: {e}")
        return None

def place_long(symbol, usd):
    if has_open_position("LONG"):
        send_message("‚ö†Ô∏è –£–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∞ LONG –ø–æ–∑–∏—Ü—ñ—è")
        return

    try:
        entry = float(binance_client.futures_mark_price(symbol=symbol)["markPrice"])
        qty = get_quantity(symbol, usd)
        if not qty:
            send_message("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å")
            return

        tp = round(entry * 1.015, 2)
        sl = round(entry * 0.992, 2)

        if DRY_RUN:
            send_message(f"ü§ñ [DRY_RUN] LONG\nüìç Entry: {entry}\nüì¶ Qty: {qty}\nüéØ TP: {tp}\nüõ° SL: {sl}")
        else:
            binance_client.futures_create_order(
                symbol=symbol, side='BUY', type='MARKET', quantity=qty, positionSide='LONG')
            binance_client.futures_create_order(
                symbol=symbol, side='SELL', type='TAKE_PROFIT_MARKET',
                stopPrice=tp, closePosition=True, timeInForce="GTC", positionSide='LONG')
            binance_client.futures_create_order(
                symbol=symbol, side='SELL', type='STOP_MARKET',
                stopPrice=sl, closePosition=True, timeInForce="GTC", positionSide='LONG')

            send_message(f"üü¢ LONG OPEN\nüìç Entry: {entry}\nüì¶ Qty: {qty}\nüéØ TP: {tp}\nüõ° SL: {sl}")

        log_to_sheet("LONG", entry, tp, sl, qty, None, "GPT —Å–∏–≥–Ω–∞–ª")
        update_stats_sheet()

    except Exception as e:
        send_message(f"‚ùå Binance LONG error: {e}")

def place_short(symbol, usd):
    if has_open_position("SHORT"):
        send_message("‚ö†Ô∏è –£–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∞ SHORT –ø–æ–∑–∏—Ü—ñ—è")
        return

    try:
        entry = float(binance_client.futures_mark_price(symbol=symbol)["markPrice"])
        qty = get_quantity(symbol, usd)
        if not qty:
            send_message("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å")
            return

        tp = round(entry * 0.99, 2)
        sl = round(entry * 1.008, 2)

        if DRY_RUN:
            send_message(f"ü§ñ [DRY_RUN] SHORT\nüìç Entry: {entry}\nüì¶ Qty: {qty}\nüéØ TP: {tp}\nüõ° SL: {sl}")
        else:
            binance_client.futures_create_order(
                symbol=symbol, side='SELL', type='MARKET', quantity=qty, positionSide='SHORT')
            binance_client.futures_create_order(
                symbol=symbol, side='BUY', type='TAKE_PROFIT_MARKET',
                stopPrice=tp, closePosition=True, timeInForce="GTC", positionSide='SHORT')
            binance_client.futures_create_order(
                symbol=symbol, side='BUY', type='STOP_MARKET',
                stopPrice=sl, closePosition=True, timeInForce="GTC", positionSide='SHORT')

            send_message(f"üî¥ SHORT OPEN\nüìç Entry: {entry}\nüì¶ Qty: {qty}\nüéØ TP: {tp}\nüõ° SL: {sl}")

        log_to_sheet("SHORT", entry, tp, sl, qty, None, "GPT —Å–∏–≥–Ω–∞–ª")
        update_stats_sheet()

    except Exception as e:
        send_message(f"‚ùå Binance SHORT error: {e}")
# üîÅ –¢—Ä–µ–π–ª—ñ–Ω–≥-—Å—Ç–æ–ø –ª–æ–≥—ñ–∫–∞

trailing_stops = {"LONG": None, "SHORT": None}

# üß∞ –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö STOP-–æ—Ä–¥–µ—Ä—ñ–≤
def cancel_existing_stop_order(side):
    try:
        orders = binance_client.futures_get_open_orders(symbol="BTCUSDT")  # –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ
        for o in orders:
            if o["type"] == "STOP_MARKET" and o["positionSide"] == side:
                binance_client.futures_cancel_order(symbol="BTCUSDT", orderId=o["orderId"])
    except Exception as e:
        send_message(f"‚ùå Cancel stop error ({side}): {e}")

# üß† –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç—Ä–µ–π–ª—ñ–Ω–≥-—Å—Ç–æ–ø—ñ–≤
async def monitor_trailing_stops():
    while True:
        try:
            for side in ["LONG", "SHORT"]:
                pos = next((p for p in binance_client.futures_position_information(symbol="BTCUSDT")
                            if float(p["positionAmt"]) != 0 and
                               ((side == "LONG" and float(p["positionAmt"]) > 0) or
                                (side == "SHORT" and float(p["positionAmt"]) < 0))), None)

                if pos:
                    entry = float(pos["entryPrice"])
                    mark = float(binance_client.futures_mark_price(symbol="BTCUSDT")["markPrice"])
                    profit_pct = (mark - entry) / entry * 100 if side == "LONG" else (entry - mark) / entry * 100

                    # –°—Ç–æ–ø —É –±–µ–∑–∑–±–∏—Ç–æ–∫ –ø—Ä–∏ +0.5%
                    if profit_pct >= 0.5 and trailing_stops[side] is None:
                        new_sl = round(entry, 2)
                        trailing_stops[side] = new_sl
                        send_message(f"üõ° {side}: –°—Ç–æ–ø —É –±–µ–∑–∑–±–∏—Ç–∫—É {new_sl} (+{profit_pct:.2f}%)")

                        if not DRY_RUN:
                            cancel_existing_stop_order(side)
                            binance_client.futures_create_order(
                                symbol="BTCUSDT",
                                side='SELL' if side == "LONG" else 'BUY',
                                type='STOP_MARKET',
                                stopPrice=new_sl,
                                closePosition=True,
                                timeInForce="GTC",
                                positionSide=side
                            )

                    # –¢—Ä–µ–π–ª—ñ–Ω–≥ –ø—Ä–∏ +1.0% —ñ –±—ñ–ª—å—à–µ
                    if trailing_stops[side] and profit_pct >= 1.0:
                        new_sl = (
                            round(entry * (1 + (profit_pct - 1) / 100), 2)
                            if side == "LONG"
                            else round(entry * (1 - (profit_pct - 1) / 100), 2)
                        )

                        if new_sl != trailing_stops[side]:
                            trailing_stops[side] = new_sl
                            send_message(f"üîÅ {side}: –ù–æ–≤–∏–π —Ç—Ä–µ–π–ª—ñ–Ω–≥-—Å—Ç–æ–ø {new_sl} (+{profit_pct:.2f}%)")

                            if not DRY_RUN:
                                cancel_existing_stop_order(side)
                                binance_client.futures_create_order(
                                    symbol="BTCUSDT",
                                    side='SELL' if side == "LONG" else 'BUY',
                                    type='STOP_MARKET',
                                    stopPrice=new_sl,
                                    closePosition=True,
                                    timeInForce="GTC",
                                    positionSide=side
                                )

        except Exception as e:
            send_message(f"‚ö†Ô∏è Trailing error: {e}")

        await asyncio.sleep(15)
# ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –±–µ–∑ —Å–∏–≥–Ω–∞–ª—É (—â–æ—Ö–≤–∏–ª–∏–Ω–∏)

async def monitor_auto_signals():
    global last_open_interest
    while True:
        try:
            oi = get_open_interest("BTCUSDT")
            volume = get_volume("BTCUSDT")
            news = get_latest_news()

            if not oi or not volume:
                await asyncio.sleep(60)
                continue

            delta = ((oi - last_open_interest) / last_open_interest) * 100 if last_open_interest else 0
            last_open_interest = oi

            # –ì–µ–Ω–µ—Ä—É—î–º–æ –±–∞–∑–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª
            if delta > 0.2:
                signal = "LONG"
            elif delta < -0.2:
                signal = "SHORT"
            else:
                signal = None

            if not signal:
                await asyncio.sleep(60)
                continue

            decision = ask_gpt_trade_with_all_context(...)  
            send_message(f"ü§ñ GPT (auto): {decision} –Ω–∞ –±–∞–∑—ñ delta {delta:.2f}%")

            if decision in ["LONG", "BOOSTED_LONG"]:
                await asyncio.to_thread(place_long, "BTCUSDT", TRADE_USD_AMOUNT)
            elif decision in ["SHORT", "BOOSTED_SHORT"]:
                await asyncio.to_thread(place_short, "BTCUSDT", TRADE_USD_AMOUNT)

        except Exception as e:
            send_message(f"‚ùå Auto-signal error: {e}")

        await asyncio.sleep(60)
# üì¨ Webhook –¥–ª—è TradingView

@app.post("/webhook")
async def webhook(req: Request):
    global last_open_interest
    try:
        data = await req.json()
        signal = data.get("message", "").strip().upper()
        send_message(f"üì© –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª: {signal}")

        if signal not in ["LONG", "SHORT", "BOOSTED_LONG", "BOOSTED_SHORT"]:
            send_message(f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Å–∏–≥–Ω–∞–ª: {signal}")
            return {"error": "Invalid signal"}

        oi = get_open_interest("BTCUSDT")
        volume = get_volume("BTCUSDT")
        news = get_latest_news()

        delta = ((oi - last_open_interest) / last_open_interest) * 100 if last_open_interest and oi else 0
        last_open_interest = oi

        send_message(f"üìä OI: {oi:,.0f} | Volume: {volume} | ŒîOI: {delta:.2f}%")

        decision = ask_gpt_trade_with_all_context(signal, news, oi, delta, volume)
        send_message(f"ü§ñ GPT –≤–∏—Ä—ñ—à–∏–≤: {decision}")

        if decision in ["LONG", "BOOSTED_LONG"]:
            await asyncio.to_thread(place_long, "BTCUSDT", TRADE_USD_AMOUNT)
        elif decision in ["SHORT", "BOOSTED_SHORT"]:
            await asyncio.to_thread(place_short, "BTCUSDT", TRADE_USD_AMOUNT)

        return {"ok": True}
    except Exception as e:
        send_message(f"‚ùå Webhook error: {e}")
        return {"error": str(e)}
# üí∞ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ–π + GPT –ø–æ—è—Å–Ω–µ–Ω–Ω—è

closed_positions_handled = set()

async def monitor_closures():
    while True:
        try:
            for side in ["LONG", "SHORT"]:
                positions = binance_client.futures_position_information(symbol="BTCUSDT")
                pos = next((p for p in positions if
                            float(p["positionAmt"]) == 0 and
                            ((side == "LONG" and float(p["entryPrice"]) > 0) or
                             (side == "SHORT" and float(p["entryPrice"]) > 0))), None)

                if pos:
                    pos_id = f"{side}-{pos['updateTime']}"
                    if pos_id in closed_positions_handled:
                        continue
                    closed_positions_handled.add(pos_id)

                    entry = float(pos["entryPrice"])
                    mark = float(binance_client.futures_mark_price(symbol="BTCUSDT")["markPrice"])

                    if entry == 0:
                        continue  # –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ 0

                    pnl = round((mark - entry) * 1000, 2) if side == "LONG" else round((entry - mark) * 1000, 2)
                    result = "WIN" if pnl > 0 else "LOSS"

                    update_result_in_sheet(side, result, f"{pnl:+.2f}")

                    # GPT –ø–æ—è—Å–Ω–µ–Ω–Ω—è –ø—Ä–∏ LOSS
                    if result == "LOSS":
                        reason = explain_trade_outcome(side, result, pnl)
                        log_learning_entry(side, result, reason, pnl)
                        send_message(f"üß† GPT –ø–æ—è—Å–Ω–µ–Ω–Ω—è –∑–±–∏—Ç–∫—É:\n{reason}")

                    # –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ —Ä–æ–∑–º—ñ—Ä set
                    if len(closed_positions_handled) > 100:
                        closed_positions_handled.clear()

        except Exception as e:
            send_message(f"‚ö†Ô∏è Closure check error: {e}")

        await asyncio.sleep(60)
# üöÄ –ó–∞–ø—É—Å–∫ FastAPI + –∫–ª–∞—Å—Ç–µ—Ä + —Ç—Ä–µ–π–ª—ñ–Ω–≥ + –∞–≤—Ç–æ–∞–Ω–∞–ª—ñ–∑

if __name__ == "__main__":
    import uvicorn

    def start_cluster():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(monitor_cluster_trades())

    def start_trailing():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(monitor_trailing_stops())

    def start_auto_signals():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(monitor_auto_signals())

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ —Ñ–æ–Ω–æ–≤—ñ –ø—Ä–æ—Ü–µ—Å–∏
    threading.Thread(target=start_cluster).start()
    threading.Thread(target=start_trailing).start()
    threading.Thread(target=start_auto_signals).start()

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ FastAPI —Å–µ—Ä–≤–µ—Ä
    port = int(os.getenv("PORT", 10000))
    uvicorn.run("main:app", host="0.0.0.0", port=port)

